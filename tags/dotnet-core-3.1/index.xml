<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotnet core 3.1 on Coding notes</title>
    <link>https://www.bustroker.com/tags/dotnet-core-3.1/</link>
    <description>Recent content in dotnet core 3.1 on Coding notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bustroker.com/tags/dotnet-core-3.1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dotnet 3.1 appsettings &amp; env variables</title>
      <link>https://www.bustroker.com/notes/dotnet-3.1-appsettings-env-variables/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/dotnet-3.1-appsettings-env-variables/</guid>
      <description>Reading apppsettings.json in dotnet 3.1 Add the packages
dotnet add package Microsoft.Extensions.Configurationdotnet add package Microsoft.Extensions.Configuration.FileExtensionsdotnet add package Microsoft.Extensions.Configuration.JsonAdd appsettings.json file with required parameters
{ &amp;#34;Settings&amp;#34;: { &amp;#34;Params&amp;#34;: { &amp;#34;Param1&amp;#34;: &amp;#34;value 1&amp;#34;, &amp;#34;Param2&amp;#34;: &amp;#34;value 2&amp;#34; } } } Load configuration section Console app // Program.cs var builder = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile(&amp;#34;appsettings.json&amp;#34;, optional: true, reloadOnChange: true); IConfiguration configuration = builder.Build(); Use configuration
var param1 = configuration.GetSection(&amp;#34;Settings&amp;#34;).GetValue&amp;lt;string&amp;gt;(&amp;#34;Params:Param1&amp;#34;); Web Api // Program.</description>
    </item>
    
    <item>
      <title>Handling parallel exceptions in dotnet</title>
      <link>https://www.bustroker.com/notes/handling-parallel-exceptions-in-dotnet/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/handling-parallel-exceptions-in-dotnet/</guid>
      <description>I&amp;rsquo;m executing several tasks in parallel, where more than one throw exceptions. I want to handle all the exceptions, which basically means catching them all and being able to, at least, rethrowing them with all the info they carry.
So, here it is how
var runnersTasks = new List&amp;lt;Task&amp;gt;();// list to keep the tasks created Task compositeTask = null; // task consisting in waiting for all the tasks to finish in parallel try { // run all the tasks and keep them in the list  Runners.</description>
    </item>
    
  </channel>
</rss>
