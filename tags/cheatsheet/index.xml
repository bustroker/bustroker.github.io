<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cheatsheet on Coding notes</title>
    <link>https://www.bustroker.com/tags/cheatsheet/</link>
    <description>Recent content in cheatsheet on Coding notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bustroker.com/tags/cheatsheet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Recover lost `PATH` variable</title>
      <link>https://www.bustroker.com/notes/recover-lost-path-variable/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/recover-lost-path-variable/</guid>
      <description>The idea is to open a cmd in the context of an application that was running before the PATH variable was broken, e.g., Chrome. Go to Chrome, hit ctrl+o, and it opens an explorer window. Go to the window&amp;rsquo;s path bar and type cmd and enter. A cmd opens &amp;ldquo;in the context&amp;rdquo; of Chrome. Now just display the PATH variable that was in place when Chrome was executed
echo %PATH% </description>
    </item>
    
    <item>
      <title>Powershell cheatsheet</title>
      <link>https://www.bustroker.com/notes/powershell-cheatsheet/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/powershell-cheatsheet/</guid>
      <description>Bypass digitally sign constrain for scripts execution Run powershell as Administrator.
Set-ExecutionPolicy -ExecutionPolicy Unrestricted List environment variables Get-ChildItem -Path Env:\ Also, using .net from powershell, and specifying system-level variables, by specifying machine as second argument. This argument could also be user
[System.Environment]::GetEnvironmentVariable(&amp;#39;VARIABLE_NAME&amp;#39;,&amp;#39;machine&amp;#39;) For some reason, the previous doesn&amp;rsquo;t work for variable COMPUTERNAME. To get computer name:
$env:computername Set environment variable Run powershell as Admin.
new variable [System.Environment]::SetEnvironmentVariable(&amp;#39;VARIABLE_NAME&amp;#39;, &amp;#39;VARIABLE_VALUE&amp;#39;,[System.EnvironmentVariableTarget]::Machine) add to an existing variable (typically to PATH) $current=[System.</description>
    </item>
    
    <item>
      <title>MySql/MariaDb command line cheatsheet</title>
      <link>https://www.bustroker.com/notes/mysql/mariadb-command-line-cheatsheet/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/mysql/mariadb-command-line-cheatsheet/</guid>
      <description>Commands Connect mysql [-h 192.168.1.100] -u USER_NAME -p [DATABASE_NAME] Will be prompted for password
Once connected, the commanda need to end with ;.
Common commands ´´´ show tables; ´´´
Exit Ctrl+C </description>
    </item>
    
    <item>
      <title>Azure DevOps yaml pipeline cheatsheet</title>
      <link>https://www.bustroker.com/notes/azure-devops-yaml-pipeline-cheatsheet/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-devops-yaml-pipeline-cheatsheet/</guid>
      <description>A couple remarks Use a single pipeline for CI-CD, as there seems to be no way to connect BuildId (i.e., container version/tag to deploy) from CI pipeline to CD pipeline. The environment referenced in the deployment jobs are created if doesn&amp;rsquo;t exist The environment is where the approvals are configured, directly in Azure DevOps The pipeline is linked to a git repo in Azure DevOps as well. The pipeline is triggered when the master branch is pushed.</description>
    </item>
    
    <item>
      <title>Helm 3 commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/helm-3-commands-cheatsheet/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/helm-3-commands-cheatsheet/</guid>
      <description>Create .tgz package from chart folder content cd chart helm package . Deploy local tgz package to kubernetes The terminal must have been authenticated. In case of AKS, run az aks get-credentials --resource-group &amp;lt;RESOURCEGROUP_NAME&amp;gt; --name &amp;lt;AKS_CLUSTERNAME&amp;gt;
helm install &amp;lt;RELEASE_NAME&amp;gt; &amp;lt;TGZ_PACKAGE&amp;gt; List releases in kubernetes helm listhelm get all &amp;lt;RELEASE_NAME&amp;gt; Deploy chart from registry No direct way for the moment. Need to pull, export and then install
helm chart pull &amp;lt;PACKAGE_REPO_WITH_VERSION&amp;gt;helm chart export &amp;lt;PACKAGE_REPO_WITH_VERSION&amp;gt;helm install &amp;lt;RELEASE_NAME&amp;gt; &amp;lt;EXPORTED_CHART_FOLDER&amp;gt; helm chart export will create a folder named after the chart (chart.</description>
    </item>
    
    <item>
      <title>Kubernetes (1.7) commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/kubernetes-1.7-commands-cheatsheet/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/kubernetes-1.7-commands-cheatsheet/</guid>
      <description>Version: 1.6
Contexts kubectl config get-contexts kubectl config delete-context CONTEXT_NAME kubectl config set-context --current --namespace=NAMESPACE kubectl config use-context CONTEXT_NAME Run pod from image kubectl run NAME --image=image [--env=&amp;#34;key=value&amp;#34;] Get info kubectl get pods [-o wide] kubectl describe service SERVICE_NAME kubectl get pods --all-namespaces -o wide --field-selector spec.nodeName=NODE_NAME Delete all pods with a label kubectl delete pods -l label=value Delete all pods in a specific state pods, in Linux E.g., STATE=Evicted</description>
    </item>
    
    <item>
      <title>Docker cheatsheet</title>
      <link>https://www.bustroker.com/notes/docker-cheatsheet/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/docker-cheatsheet/</guid>
      <description>Version: 19.03
buid image and set tag -t docker build -t bustroker.notes.webui:v1 . multiple tags are allowed as well
docker build -t bustroker.notes.webui:v1 -t bustroker.notes.webui:latest . tag image docker tag [localImage] [registryServer]/[imageName]:[version] # ej docker tag bustroker.notes.webui:v1 bustrokeracr.azurecr.io/bustroker.notes.webui:v1 add tag to existing tagged image docker tag bustroker.notes.webui:v1 bustroker.notes.webui:latest list images docker images remove all images optionally add -f at the end to force
in Linux docker rmi $(docker images -q) in Windows (powershell) docker images -a -q | % { docker image rm $_ -f } run container docker run --rm -d ` -p [HOST_PORT]:[CONTAINER_PORT] ` --network host ` -e [ENV_VAR_NAME]=[ENV_VAR_VALUE] ` -v /host/directory:/container/directory ` [IMAGE_NAME] &amp;ndash;rm =&amp;gt; remove the container on exit -d =&amp;gt; run and detach the console (run as daemon) -p =&amp;gt; port map, i.</description>
    </item>
    
    <item>
      <title>Docker compose</title>
      <link>https://www.bustroker.com/notes/docker-compose/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/docker-compose/</guid>
      <description>Docker compose services: zookeeper: image: debezium/zookeeper ports: - &amp;#34;2181:2181&amp;#34; - &amp;#34;2888:2888&amp;#34; - &amp;#34;3888:3888&amp;#34; kafka: image: debezium/kafka ports: - &amp;#34;9092:9092&amp;#34; volumes: - /var/run/docker.sock:/var/run/docker.sock depends_on: - &amp;#34;zookeeper&amp;#34; connect: image: debezium/connect ports: - &amp;#34;8083:8083&amp;#34; environment: - GROUP_ID=1 - CONFIG_STORAGE_TOPIC=my_connect_configs - OFFSET_STORAGE_TOPIC=my_connect_offsets - STATUS_STORAGE_TOPIC=my_connect_statuses depends_on: - &amp;#34;kafka&amp;#34; docker-compose terminal into service container docker-compose up exec [SERVICE_NAME] [TERMINAL] TERMINAL could be sh, cmd, powershell..
docker-compose # launch the containers docker-compose up [-d] [--build] # launch the containers and opens interactive terminal inside docker-compose run [SERVICE] # stop and remove containers docker-compose down # stop the containers, without removing docker-compose stop </description>
    </item>
    
    <item>
      <title>Azure Managed Identity token with cURL</title>
      <link>https://www.bustroker.com/notes/azure-managed-identity-token-with-curl/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-managed-identity-token-with-curl/</guid>
      <description>To test Managed Identity is working fine, SSH inside the VM with Managed Identity enabled (or RDP, for that matter) and cURL an access token for some resource.
curl &amp;#34;http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;amp;resource=https%3A%2F%2Fmanagement.azure.com%2F&amp;#34; -H Metadata:true -s resource query parameter, as per documentation:
&amp;ldquo;A query string parameter, indicating the App ID URI of the target resource. It also appears in the aud (audience) claim of the issued token. This example requests a token to access Azure Resource Manager, which has an App ID URI of https://management.</description>
    </item>
    
    <item>
      <title>cURL usefull commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/curl-usefull-commands-cheatsheet/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/curl-usefull-commands-cheatsheet/</guid>
      <description>Basic GET curl localhost:8080 Basic POST. application/x-www-form-urlencoded is the default curl -X POST http://localhost:8080/data -d &amp;#34;param1=value1&amp;amp;param2=value2&amp;#34; curl -X POST http://localhost:3000/data -d &amp;#34;@data.txt&amp;#34; POST json curl -X POST http://localhost:3000/data -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#39;{\&amp;#34;key1\&amp;#34;:\&amp;#34;value1\&amp;#34;, \&amp;#34;key2\&amp;#34;:\&amp;#34;value2\&amp;#34;}&amp;#39; curl -X POST http://localhost:3000/data -H &amp;#34;Content-Type: application/json&amp;#34; -d &amp;#34;@data.json&amp;#34; Double quotes are escaped with \, required for powershell.
Disable certificate validation curl -k https://localhost:8080 Add bearer token header curl https://bustroker.com/api/resource -H &amp;#39;Accept: application/json&amp;#39; -H &amp;#34;Authorization: Bearer &amp;lt;TOKEN&amp;gt;&amp;#34; New line after output curl localhost:8080 ;echo [Linux] Pretty format json output curl localhost:8080 | json_pp also, jq would do it</description>
    </item>
    
    <item>
      <title>Create file from command line in Windows</title>
      <link>https://www.bustroker.com/notes/create-file-from-command-line-in-windows/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/create-file-from-command-line-in-windows/</guid>
      <description>Create a file with some content from command line in windows from any console
echo &amp;#34;whate ever content&amp;#34; &amp;gt; filename.txt </description>
    </item>
    
    <item>
      <title>Python data science cheatsheet</title>
      <link>https://www.bustroker.com/notes/python-data-science-cheatsheet/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/python-data-science-cheatsheet/</guid>
      <description>Pandas import pandas as pd
Load CSV with &amp;lsquo;;&amp;rsquo; separator df = pd.read_csv(&amp;ldquo;data/entryRequests.csv&amp;rdquo;, sep = &amp;ldquo;;&amp;rdquo;, parse_dates=[[&amp;ldquo;Date&amp;rdquo;, &amp;ldquo;Time&amp;rdquo;]])
Print column names print(df.columns)
Importing pd.read_csv(filename) # From a CSV file pd.read_table(filename) # From a delimited text file (like TSV) pd.read_excel(filename) # From an Excel file pd.read_sql(query, connection_object) # Read from a SQL table/database pd.read_json(json_string) # Read from a JSON formatted string, URL or file. pd.read_html(url) # Parses an html URL, string or file and extracts tables to a list of dataframes pd.</description>
    </item>
    
    <item>
      <title>Nuget.config file</title>
      <link>https://www.bustroker.com/notes/nuget.config-file/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/nuget.config-file/</guid>
      <description>In Azure DevOps&amp;rsquo; Package Feed, the user bustroker.packages.restore@bustroker.onmicrosoft.com needs to be added explicitly as a Reader, in the Feed&amp;rsquo;s Security tab. Then generate a Read Package PAT for that user.
//nuget.config &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;packageSources&amp;gt; &amp;lt;clear /&amp;gt; &amp;lt;add key=&amp;#34;BustrokerPackages&amp;#34; value=&amp;#34;https://pkgs.dev.azure.com/bustroker/_packaging/Bustroker.Packages./nuget/v3/index.json&amp;#34; /&amp;gt; &amp;lt;/packageSources&amp;gt; &amp;lt;packageSourceCredentials&amp;gt; &amp;lt;BustrokerPackages&amp;gt; &amp;lt;add key=&amp;#34;Username&amp;#34; value=&amp;#34;bustroker.packages.restore@bustroker.onmicrosoft.com&amp;#34; /&amp;gt; &amp;lt;!-- Azure DevOps PAT that can ONLY ReadPackages --&amp;gt; &amp;lt;add key=&amp;#34;ClearTextPassword&amp;#34; value=&amp;#34;CLEAR_PAT&amp;#34; /&amp;gt; &amp;lt;/BustrokerPackages&amp;gt; &amp;lt;/packageSourceCredentials&amp;gt; &amp;lt;/configuration&amp;gt; Environment Variables can be used as well //nuget.</description>
    </item>
    
    <item>
      <title>Change directory to different drive in Windows cmd</title>
      <link>https://www.bustroker.com/notes/change-directory-to-different-drive-in-windows-cmd/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/change-directory-to-different-drive-in-windows-cmd/</guid>
      <description>To change from C drive to D drive, going cd D: or any similar, doesn&amp;rsquo;t work. Instead go:
C:\Users\bustroker&amp;gt; d:D:\&amp;gt; </description>
    </item>
    
    <item>
      <title>Kusto cheatsheet</title>
      <link>https://www.bustroker.com/notes/kusto-cheatsheet/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/kusto-cheatsheet/</guid>
      <description>requests durations distribution with steps (bins) of 100 ms app(&amp;#34;bustroker-sales-webapi&amp;#34;).requests| where name == &amp;#34;POST SalesController/Post&amp;#34;| project req_timestamp = timestamp, req_id = id, req_name = name, req_url = url, req_success = success, req_resultCode = resultCode, req_duration = duration, req_operation_name = operation_Name, req_operation_Id = operation_Id| summarize count() by bin(req_duration, 100)| sort by req_duration asc| render timechart requests duration percentiles and requests dependencies duration percentiles app(&amp;#34;bustroker-sales-webapi&amp;#34;).requests| where name == &amp;#34;POST SalesControler/Post&amp;#34;| project req_timestamp = timestamp, req_id = id, req_name = name, req_url = url, req_success = success, req_resultCode = resultCode, req_duration = duration, req_operation_name = operation_Name, req_operation_Id = operation_Id| summarize count(), avg(req_duration), stdev(req_duration) , percentiles(req_duration, 25, 50, 95, 99)| project type_tag = &amp;#34;Core Request&amp;#34;, total = count_ , avg_duration = avg_req_duration, stdev = stdev_req_duration, percentile_duration_25 = percentile_req_duration_25, percentile_duration_50 = percentile_req_duration_50, percentile_duration_95 = percentile_req_duration_95, percentile_duration_99 = percentile_req_duration_99 | union(app(&amp;#34;bustroker-sales-webapi&amp;#34;).</description>
    </item>
    
    <item>
      <title>Vagrant VM provision &amp; vagrant commands cheathsheet</title>
      <link>https://www.bustroker.com/notes/vagrant-vm-provision-vagrant-commands-cheathsheet/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/vagrant-vm-provision-vagrant-commands-cheathsheet/</guid>
      <description>Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config|# config.vm.box = &amp;#34;debian/bullseye64&amp;#34;config.vm.box = &amp;#34;ubuntu/focal64&amp;#34; # v 20.04 LTSconfig.vm.synced_folder &amp;#34;./&amp;#34;, &amp;#34;/vagrant&amp;#34;config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 8080, host: 8080config.vm.provision :shell, path: &amp;#34;vagrant_provision.sh&amp;#34;config.vm.provider &amp;#34;virtualbox&amp;#34; do |vb|vb.name = &amp;#34;UbuntuBionic&amp;#34; vb.memory = 2048# vb.gui = trueendend Vagrant provision script Create a file vagrant_provision.sh in the same folder of Vagrantfile, with the following content. Just remove the tools not required, here&amp;rsquo;s all I&amp;rsquo;ve ever needed.</description>
    </item>
    
  </channel>
</rss>
