<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cheatsheet on Coding notes</title>
    <link>https://www.bustroker.com/tags/cheatsheet/</link>
    <description>Recent content in cheatsheet on Coding notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bustroker.com/tags/cheatsheet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Azure DevOps yaml pipeline cheatsheet</title>
      <link>https://www.bustroker.com/notes/azure-devops-yaml-pipeline-cheatsheet/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-devops-yaml-pipeline-cheatsheet/</guid>
      <description>A couple remarks  Use a single pipeline for CI-CD, as there seems to be no way to connect BuildId (i.e., container version/tag to deploy) from CI pipeline to CD pipeline. The environment referenced in the deployment jobs are created if doesn&amp;rsquo;t exist The environment is where the approvals are configured, directly in Azure DevOps The pipeline is linked to a git repo in Azure DevOps as well. The pipeline is triggered when the master branch is pushed.</description>
    </item>
    
    <item>
      <title>Helm 3 commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/helm-3-commands-cheatsheet/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/helm-3-commands-cheatsheet/</guid>
      <description>Create .tgz package from chart folder content cd chart helm package . Deploy local tgz package to kubernetes The terminal must have been authenticated. In case of AKS, run az aks get-credentials --resource-group &amp;lt;RESOURCEGROUP_NAME&amp;gt; --name &amp;lt;AKS_CLUSTERNAME&amp;gt;
helm install &amp;lt;RELEASE_NAME&amp;gt; &amp;lt;TGZ_PACKAGE&amp;gt; List releases in kubernetes helm list helm get all &amp;lt;RELEASE_NAME&amp;gt; Deploy chart from registry No direct way for the moment. Need to pull, export and then install
helm chart pull &amp;lt;PACKAGE_REPO_WITH_VERSION&amp;gt; helm chart export &amp;lt;PACKAGE_REPO_WITH_VERSION&amp;gt; helm install &amp;lt;RELEASE_NAME&amp;gt; &amp;lt;EXPORTED_CHART_FOLDER&amp;gt; helm chart export will create a folder named after the chart (chart.</description>
    </item>
    
    <item>
      <title>Kubernetes (1.7) commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/kubernetes-1.7-commands-cheatsheet/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/kubernetes-1.7-commands-cheatsheet/</guid>
      <description>Version: 1.6
Get info kubectl get pods -o wide kubectl describe svc &amp;lt;SERVICE-NAME&amp;gt; Delete all pods with a label kubectl delete pods -l label=value Set namespace for kubectl console session kubectl config set-context --current -n=&amp;lt;NAMESPACE&amp;gt; Validate deployment before actually applying it kubectl apply --dry-run=client -f deployment.yaml Deploy a service and watch process kubectl apply -f deployment.yaml kubectl get service &amp;lt;SERVICE-NAME&amp;gt; [--watch] Bash into k8s existing pod kubectl exec -it &amp;lt;POD-NAME&amp;gt; -- /bin/bash Deploy the most basic disposable pod and bash into it, to access the network.</description>
    </item>
    
    <item>
      <title>Docker commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/docker-commands-cheatsheet/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/docker-commands-cheatsheet/</guid>
      <description>Version: 19.03
buid image and set tag -t docker build -t bustroker.notes.webui:v1 . multiple tags are allowed as well
docker build -t bustroker.notes.webui:v1 -t bustroker.notes.webui:latest . tag image docker tag [localImage] [registryServer]/[imageName]:[version] # ej docker tag bustroker.notes.webui:v1 bustrokeracr.azurecr.io/bustroker.notes.webui:v1 add tag to existing tagged image docker tag bustroker.notes.webui:v1 bustroker.notes.webui:latest list images docker images remove all images optionally add -f at the end to force
docker rmi $(docker images -q) run container from image docker run -d -p HOST-PORT:CONTAINER-PORT &amp;lt;IMAGE-NAME&amp;gt; -p: [port in host]:[port in the container] -d: run as deamon</description>
    </item>
    
    <item>
      <title>Azure Managed Identity token with cURL</title>
      <link>https://www.bustroker.com/notes/azure-managed-identity-token-with-curl/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-managed-identity-token-with-curl/</guid>
      <description>To test Managed Identity is working fine, SSH inside the VM with Managed Identity enabled (or RDP, for that matter) and cURL an access token for some resource.
curl &amp;quot;http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;amp;resource=https%3A%2F%2Fmanagement.azure.com%2F&amp;quot; -H Metadata:true -s resource query parameter, as per documentation:
 &amp;ldquo;A query string parameter, indicating the App ID URI of the target resource. It also appears in the aud (audience) claim of the issued token. This example requests a token to access Azure Resource Manager, which has an App ID URI of https://management.</description>
    </item>
    
    <item>
      <title>cURL usefull commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/curl-usefull-commands-cheatsheet/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/curl-usefull-commands-cheatsheet/</guid>
      <description>Basic GET curl localhost:8080 Basic POST. application/x-www-form-urlencoded is the default curl -X POST http://localhost:8080/data -d &amp;quot;param1=value1&amp;amp;param2=value2&amp;quot; POST json curl -X POST http://localhost:3000/data -H &amp;quot;Content-Type: application/json&amp;quot; -d &#39;{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;}&#39; POST data from file. application/x-www-form-urlencoded is the default. curl -X POST http://localhost:3000/data -d &amp;quot;@data.txt&amp;quot; Disable certificate validation curl -k https://localhost:8080 Add bearer token header curl -H &#39;Accept: application/json&#39; -H &amp;quot;Authorization: Bearer &amp;lt;TOKEN&amp;gt;&amp;quot; https://bustroker.com/api/resource New line after output curl localhost:8080 ;echo Pretty format json output (Linux) curl localhost:8080 | json_pp also, jq would do it</description>
    </item>
    
    <item>
      <title>Create file from command line in Windows</title>
      <link>https://www.bustroker.com/notes/create-file-from-command-line-in-windows/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/create-file-from-command-line-in-windows/</guid>
      <description>Create a file with some content from command line in windows from any console
echo &amp;quot;whate ever content&amp;quot; &amp;gt; filename.txt </description>
    </item>
    
    <item>
      <title>Python data science cheatsheet</title>
      <link>https://www.bustroker.com/notes/python-data-science-cheatsheet/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/python-data-science-cheatsheet/</guid>
      <description>Pandas import pandas as pd
Load CSV with &amp;lsquo;;&amp;rsquo; separator df = pd.read_csv(&amp;ldquo;data/entryRequests.csv&amp;rdquo;, sep = &amp;ldquo;;&amp;rdquo;, parse_dates=[[&amp;ldquo;Date&amp;rdquo;, &amp;ldquo;Time&amp;rdquo;]])
Print column names print(df.columns)
Importing pd.read_csv(filename) # From a CSV file pd.read_table(filename) # From a delimited text file (like TSV) pd.read_excel(filename) # From an Excel file pd.read_sql(query, connection_object) # Read from a SQL table/database pd.read_json(json_string) # Read from a JSON formatted string, URL or file. pd.read_html(url) # Parses an html URL, string or file and extracts tables to a list of dataframes pd.</description>
    </item>
    
    <item>
      <title>Nuget.config file</title>
      <link>https://www.bustroker.com/notes/nuget.config-file/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/nuget.config-file/</guid>
      <description>In Azure DevOps&#39; Package Feed, the user bustroker.packages.restore@bustroker.onmicrosoft.com needs to be added explicitly as a Reader, in the Feed&amp;rsquo;s Security tab. Then generate a Read Package PAT for that user.
//nuget.config &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;packageSources&amp;gt; &amp;lt;clear /&amp;gt; &amp;lt;add key=&amp;#34;BustrokerPackages&amp;#34; value=&amp;#34;https://pkgs.dev.azure.com/bustroker/_packaging/Bustroker.Packages./nuget/v3/index.json&amp;#34; /&amp;gt; &amp;lt;/packageSources&amp;gt; &amp;lt;packageSourceCredentials&amp;gt; &amp;lt;BustrokerPackages&amp;gt; &amp;lt;add key=&amp;#34;Username&amp;#34; value=&amp;#34;bustroker.packages.restore@bustroker.onmicrosoft.com&amp;#34; /&amp;gt; &amp;lt;!-- Azure DevOps PAT that can ONLY ReadPackages --&amp;gt; &amp;lt;add key=&amp;#34;ClearTextPassword&amp;#34; value=&amp;#34;CLEAR_PAT&amp;#34; /&amp;gt; &amp;lt;/BustrokerPackages&amp;gt; &amp;lt;/packageSourceCredentials&amp;gt; &amp;lt;/configuration&amp;gt; Environment Variables can be used as well //nuget.</description>
    </item>
    
    <item>
      <title>Change directory to different drive in Windows cmd</title>
      <link>https://www.bustroker.com/notes/change-directory-to-different-drive-in-windows-cmd/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/change-directory-to-different-drive-in-windows-cmd/</guid>
      <description>To change from C drive to D drive, going cd D: or any similar, doesn&amp;rsquo;t work. Instead go:
C:\Users\bustroker&amp;gt; d: D:\&amp;gt; </description>
    </item>
    
    <item>
      <title>Kusto cheatsheet</title>
      <link>https://www.bustroker.com/notes/kusto-cheatsheet/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/kusto-cheatsheet/</guid>
      <description>requests durations distribution with steps (bins) of 100 ms app(&amp;quot;bustroker-sales-webapi&amp;quot;).requests | where name == &amp;quot;POST SalesController/Post&amp;quot; | project req_timestamp = timestamp, req_id = id, req_name = name, req_url = url, req_success = success, req_resultCode = resultCode, req_duration = duration, req_operation_name = operation_Name, req_operation_Id = operation_Id | summarize count() by bin(req_duration, 100) | sort by req_duration asc | render timechart requests duration percentiles and requests dependencies duration percentiles app(&amp;quot;bustroker-sales-webapi&amp;quot;).requests | where name == &amp;quot;POST SalesControler/Post&amp;quot; | project req_timestamp = timestamp, req_id = id, req_name = name, req_url = url, req_success = success, req_resultCode = resultCode, req_duration = duration, req_operation_name = operation_Name, req_operation_Id = operation_Id | summarize count(), avg(req_duration), stdev(req_duration) , percentiles(req_duration, 25, 50, 95, 99) | project type_tag = &amp;quot;Core Request&amp;quot;, total = count_ , avg_duration = avg_req_duration, stdev = stdev_req_duration, percentile_duration_25 = percentile_req_duration_25, percentile_duration_50 = percentile_req_duration_50, percentile_duration_95 = percentile_req_duration_95, percentile_duration_99 = percentile_req_duration_99 | union( app(&amp;quot;bustroker-sales-webapi&amp;quot;).</description>
    </item>
    
    <item>
      <title>Vagrant commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/vagrant-commands-cheatsheet/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/vagrant-commands-cheatsheet/</guid>
      <description>Most used commands new vagrant file vagrant init check status vagrant status vagrant global-status to manage VMs (boxes) vagrant box to run VM local project folder is sync with /vagrant in VM
vagrant up to ssh in vagrant ssh close ssh connection with Ctrl+d
to shut down the VM (without loosing everything) vagrant halt to destroy the VM (losing everything) vagrant destroy ssh into VM vagrant ssh vagrant VM ssh server is in host&amp;rsquo;s 2222 port, so putty can be used targeting localhost:2222 Also, vagrant VM&amp;rsquo;s 22 port can be forwarded to any other host&amp;rsquo;s port.</description>
    </item>
    
  </channel>
</rss>
