<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Coding notes</title>
    <link>https://www.bustroker.com/tags/docker/</link>
    <description>Recent content in docker on Coding notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bustroker.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Host aspnet website in docker with IIS and self-signed certificate</title>
      <link>https://www.bustroker.com/notes/host-aspnet-website-in-docker-with-iis-and-self-signed-certificate/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/host-aspnet-website-in-docker-with-iis-and-self-signed-certificate/</guid>
      <description>Dockerfile FROMmcr.microsoft.com/dotnet/framework/aspnet:4.8SHELL [ &amp;#34;powershell&amp;#34; ]COPY src/Bustroker.LocalEnv.WebUI/bin/app.publish c:/webappADD enablessl.ps1 /windows/temp/configureIIS.ps1RUN powershell.exe -executionpolicy bypass c:\windows\temp\configureIIS.ps1Configure IIS powershell script Import-Module WebAdministration Set-Location IIS:\SslBindings New-WebBinding -Name &amp;#34;Default Web Site&amp;#34; -IP &amp;#34;*&amp;#34; -Port 443 -Protocol https $c = New-SelfSignedCertificate -DnsName &amp;#34;localhost&amp;#34; -CertStoreLocation cert:\LocalMachine\My $c | New-Item 0.0.0.0!443 New-WebApplication -Site &amp;#39;Default Web Site&amp;#39; -Name &amp;#39;webapp&amp;#39; -PhysicalPath &amp;#39;C:\webapp&amp;#39; Docker compose version: &amp;#39;3.8&amp;#39; services: webapp: build: . ports: - &amp;#34;80:80&amp;#34; - &amp;#34;443:443&amp;#34; Run Compile and publish the site file system, e.</description>
    </item>
    
    <item>
      <title>Run MSSQL server in docker inside vagrant (ubuntu) VM</title>
      <link>https://www.bustroker.com/notes/run-mssql-server-in-docker-inside-vagrant-ubuntu-vm/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/run-mssql-server-in-docker-inside-vagrant-ubuntu-vm/</guid>
      <description>Files Vagrant VM needs at least 2Gb.
## Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;ubuntu/focal64&amp;#34; # v 20.04 LTS config.vm.synced_folder &amp;#34;./&amp;#34;, &amp;#34;/vagrant&amp;#34; config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 1433, host: 1433 config.vm.provision :shell, path: &amp;#34;vagrant_provision.sh&amp;#34; config.vm.provider &amp;#34;virtualbox&amp;#34; do |vb| vb.name = &amp;#34;SqlServer&amp;#34;  vb.memory = 2048 end end ## vagrant_provision.sh  echo &amp;#34;provisioning VM...&amp;#34; sudo apt update sudo apt-get update # install docker and run sudo apt -y install docker.io sudo systemctl start docker sudo systemctl enable docker docker --version echo &amp;#34;docker installed and running.</description>
    </item>
    
    <item>
      <title>Azure function with docker</title>
      <link>https://www.bustroker.com/notes/azure-function-with-docker/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-function-with-docker/</guid>
      <description>Install func cli https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Ccsharp%2Cbash#install-the-azure-functions-core-tools
Create function project func init Bustroker.HttpEndpoint.Func --dotnet --dockerI renamed csproj file from Bustroker_HttpEndpoint_Func.csproj to Bustroker.HttpEndpoint.Func.csproj. The docker file is created. No need for docker to be installed. I run docker in Ubuntu VM, with Vagrant.
Create function cd Bustroker.HttpEndpoint.Funcfunc new --name HttpEndpoint [--template {HttpTrigger, CosmosDbTrigger, etc}]App settings  Add required packages  dotnet add package Microsoft.Azure.Functions.Extensionsdotnet add package Microsoft.NET.Sdk.Functions Make the function class and methods not static and inject IConfiguration in the constructor  namespace Bustroker.</description>
    </item>
    
    <item>
      <title>Setup aspnet core app with vagrant and docker</title>
      <link>https://www.bustroker.com/notes/setup-aspnet-core-app-with-vagrant-and-docker/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/setup-aspnet-core-app-with-vagrant-and-docker/</guid>
      <description>Create dotnet application. For example, a webapi The webapi will be named Bustroker.Notes.WebApi.
dotnet new webapi -n Bustroker.Notes.WebApiCreate linux VM with Vagrant I rather a linux vm to work with docker. Check the post Vagrant VM provision &amp;amp; vagrant commands cheathsheet for Vagrantfile and provision script. From there select the tools required in the VM. In the example port 8080 of VM is mapped to port 8080 in host. If another is required, it needs to be set.</description>
    </item>
    
    <item>
      <title>Docker commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/docker-commands-cheatsheet/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/docker-commands-cheatsheet/</guid>
      <description>Version: 19.03
buid image and set tag -t docker build -t bustroker.notes.webui:v1 .multiple tags are allowed as well
docker build -t bustroker.notes.webui:v1 -t bustroker.notes.webui:latest .tag image docker tag [localImage] [registryServer]/[imageName]:[version]# ej docker tag bustroker.notes.webui:v1 bustrokeracr.azurecr.io/bustroker.notes.webui:v1add tag to existing tagged image docker tag bustroker.notes.webui:v1 bustroker.notes.webui:latestlist images docker imagesremove all images optionally add -f at the end to force
 in Linux  docker rmi $(docker images -q)  in Windows (powershell)  docker images -a -q | % { docker image rm $_ -f } run container from image docker run -d -p HOST-PORT:CONTAINER-PORT &amp;lt;IMAGE-NAME&amp;gt;-p: [port in host]:[port in the container] -d: run as deamon</description>
    </item>
    
    <item>
      <title>Simplest node express static files server</title>
      <link>https://www.bustroker.com/notes/simplest-node-express-static-files-server/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/simplest-node-express-static-files-server/</guid>
      <description>The simplest node static files server.
Create the project and install express package npm initnpm install express --saveCreate server.js file in the root. // server.js const express = require(&amp;#39;express&amp;#39;); const app = express(); app.use(express.static(&amp;#39;www&amp;#39;)) /* routes root &amp;#39;/&amp;#39; to index.html */ app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { res.sendFile(&amp;#39;/index.html&amp;#39;); }) app.listen(3000, () =&amp;gt; console.log(&amp;#39;Listening on port 3000..&amp;#39;)); Create a static page Now all files in www folder are being served. Create a www folder in the root and add an html file.</description>
    </item>
    
    <item>
      <title>Run MSSQL server in docker for windows</title>
      <link>https://www.bustroker.com/notes/run-mssql-server-in-docker-for-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/run-mssql-server-in-docker-for-windows/</guid>
      <description>Docker compose First check attach_dbs argument. The first time running it, remove it. Afterwards, if starting with an existing db, use it to attach existing mdf/ldf files. They can also be attached from T-Sql after starting the server.
Note: Mapping localhost folder to default C:/Program Files&amp;hellip; fails, probably for permission reasons (not clear from the message, as usual).
// docker-compose.yaml version: &amp;#39;3.8&amp;#39; services: SQLServer: image: microsoft/mssql-server-windows-developer environment: - ACCEPT_EULA=Y - SA_PASSWORD=Password_01 # - attach_dbs=[{&amp;#39;dbName&amp;#39;:&amp;#39;Joker&amp;#39;,&amp;#39;dbFiles&amp;#39;:[&amp;#39;C:\\SQLData\\Joker1.</description>
    </item>
    
  </channel>
</rss>
