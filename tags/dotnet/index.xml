<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnet on Coding notes</title>
    <link>https://www.bustroker.com/tags/dotnet/</link>
    <description>Recent content in Dotnet on Coding notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
<<<<<<< HEAD
    <lastBuildDate>Mon, 19 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bustroker.com/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
=======
    <lastBuildDate>Mon, 19 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.bustroker.com/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
>>>>>>> 061839f6a30155c1270a4ec5da0df2ff48c1a2af
    <item>
      <title>dotnet scrips</title>
      <link>https://www.bustroker.com/notes/dotnet-scrips/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
<<<<<<< HEAD
      
      <guid>https://www.bustroker.com/notes/dotnet-scrips/</guid>
      <description>Install dotnet script dotnet tool install -g dotnet-script Write csx script file with nuget package reference // script.csx #r &amp;#34;nuget:Newtonsoft.Json, 13.0.1&amp;#34; using Newtonsoft.Json; using Newtonsoft.Json.Linq; var args = Environment.GetCommandLineArgs(); if(args.Any(a =&amp;gt; a == &amp;#34;--dry-run&amp;#34;)) { return; } Console.WriteLine(&amp;#34;Using Newtonsoft.Json to parse JSON.&amp;#34;); var json = JObject.Parse(@&amp;#34;{ &amp;#39;name&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;age&amp;#39;: 30 }&amp;#34;); Console.WriteLine(json[&amp;#34;name&amp;#34;]); Run script dotnet-script script.csx </description>
    </item>
    
=======
      <guid>https://www.bustroker.com/notes/dotnet-scrips/</guid>
      <description>Install dotnet script dotnet tool install -g dotnet-script Write csx script file with nuget package reference // script.csx #r &amp;#34;nuget:Newtonsoft.Json, 13.0.1&amp;#34; using Newtonsoft.Json; using Newtonsoft.Json.Linq; var args = Environment.GetCommandLineArgs(); if(args.Any(a =&amp;gt; a == &amp;#34;--dry-run&amp;#34;)) { return; } Console.WriteLine(&amp;#34;Using Newtonsoft.Json to parse JSON.&amp;#34;); var json = JObject.Parse(@&amp;#34;{ &amp;#39;name&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;age&amp;#39;: 30 }&amp;#34;); Console.WriteLine(json[&amp;#34;name&amp;#34;]); Run script dotnet-script script.csx </description>
    </item>
>>>>>>> 061839f6a30155c1270a4ec5da0df2ff48c1a2af
    <item>
      <title>Kafka Avro Consumer issue workaround</title>
      <link>https://www.bustroker.com/notes/kafka-avro-consumer-issue-workaround/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://www.bustroker.com/notes/kafka-avro-consumer-issue-workaround/</guid>
      <description>I reported the issue here&#xA;Description AvroDeserializer throws NullReferenceException without any further info.&#xA;Unhandled exception. Confluent.Kafka.ConsumeException: Local: Value deserialization error&#xD;---&amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.&#xD;at Confluent.SchemaRegistry.Serdes.GenericDeserializerImpl.Deserialize(String topic, Byte[] array)&#xD;at Confluent.SchemaRegistry.Serdes.AvroDeserializer`1.DeserializeAsync(ReadOnlyMemory`1 data, Boolean isNull, SerializationContext context)&#xD;at Confluent.Kafka.SyncOverAsync.SyncOverAsyncDeserializer`1.Deserialize(ReadOnlySpan`1 data, Boolean isNull, SerializationContext context)&#xD;at Confluent.Kafka.Consumer`2.Consume(Int32 millisecondsTimeout)&#xD;--- End of inner exception stack trace ---&#xD;at Confluent.Kafka.Consumer`2.Consume(Int32 millisecondsTimeout)&#xD;at Confluent.Kafka.Consumer`2.Consume(TimeSpan timeout)&#xD;at Arch.Pocs.KafkaClient.Consumer.ConsoleUI.KafkaAvroConsumer.Poll(String topic)+MoveNext() in /app/KafkaAvroConsumer.</description>
    </item>
    <item>
      <title>Install dotnet localhost ssl certificate for development</title>
      <link>https://www.bustroker.com/notes/install-dotnet-localhost-ssl-certificate-for-development/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      <guid>https://www.bustroker.com/notes/install-dotnet-localhost-ssl-certificate-for-development/</guid>
      <description>Install trusted localhost certificate dotnet dev-certs https --trust Confirm when pop up shows up.&#xA;Restart browser and browse to https://locahost:5001, or whatever localhost url, and ssl warning is gone.</description>
    </item>
  </channel>
</rss>
