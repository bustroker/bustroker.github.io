<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnet on Coding notes</title>
    <link>https://www.bustroker.com/tags/dotnet/</link>
    <description>Recent content in Dotnet on Coding notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.bustroker.com/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Generate and diff openAPI specs in dotnet</title>
      <link>https://www.bustroker.com/notes/generate-and-diff-openapi-specs-in-dotnet/</link>
      <pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://www.bustroker.com/notes/generate-and-diff-openapi-specs-in-dotnet/</guid>
      <description>Setup generation of open api spec json Using swashbuckle&#xA;dotnet add package Swashbuckle.AspNetCore.Swagger dotnet tool install --global Swashbuckle.AspNetCore.Cli dotnet build Generate openAPI spec dotnet build swagger tofile --output &amp;#34;openapi.json&amp;#34; bin/Debug/net8.0/bkr-provider-api.dll [version] # e.g swagger tofile --output &amp;#34;openapi.json&amp;#34; bin/Debug/net8.0/bkr-provider-api.dll v1 OpenAPI diff https://github.com/OpenAPITools/openapi-diff Compare two openAPI specs to find breaking changes in the contract. openapi-diff &amp;lt;old&amp;gt; &amp;lt;new&amp;gt;&#xA;# two openapi specs from files docker run --rm -v ${PWD}:/spec openapitools/openapi-diff /spec/openapi_v4.json /spec/openapi_v5.json # spec from url.</description>
    </item>
    <item>
      <title>dotnet scrips</title>
      <link>https://www.bustroker.com/notes/dotnet-scrips/</link>
      <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://www.bustroker.com/notes/dotnet-scrips/</guid>
      <description>Install dotnet script dotnet tool install -g dotnet-script Write csx script file with nuget package reference // script.csx #r &amp;#34;nuget:Newtonsoft.Json, 13.0.1&amp;#34; using Newtonsoft.Json; using Newtonsoft.Json.Linq; var args = Environment.GetCommandLineArgs(); if(args.Any(a =&amp;gt; a == &amp;#34;--dry-run&amp;#34;)) { return; } Console.WriteLine(&amp;#34;Using Newtonsoft.Json to parse JSON.&amp;#34;); var json = JObject.Parse(@&amp;#34;{ &amp;#39;name&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;age&amp;#39;: 30 }&amp;#34;); Console.WriteLine(json[&amp;#34;name&amp;#34;]); Run script dotnet-script script.csx </description>
    </item>
    <item>
      <title>Kafka Avro Consumer issue workaround</title>
      <link>https://www.bustroker.com/notes/kafka-avro-consumer-issue-workaround/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://www.bustroker.com/notes/kafka-avro-consumer-issue-workaround/</guid>
      <description>I reported the issue here&#xA;Description AvroDeserializer throws NullReferenceException without any further info.&#xA;Unhandled exception. Confluent.Kafka.ConsumeException: Local: Value deserialization error&#xD;---&amp;gt; System.NullReferenceException: Object reference not set to an instance of an object.&#xD;at Confluent.SchemaRegistry.Serdes.GenericDeserializerImpl.Deserialize(String topic, Byte[] array)&#xD;at Confluent.SchemaRegistry.Serdes.AvroDeserializer`1.DeserializeAsync(ReadOnlyMemory`1 data, Boolean isNull, SerializationContext context)&#xD;at Confluent.Kafka.SyncOverAsync.SyncOverAsyncDeserializer`1.Deserialize(ReadOnlySpan`1 data, Boolean isNull, SerializationContext context)&#xD;at Confluent.Kafka.Consumer`2.Consume(Int32 millisecondsTimeout)&#xD;--- End of inner exception stack trace ---&#xD;at Confluent.Kafka.Consumer`2.Consume(Int32 millisecondsTimeout)&#xD;at Confluent.Kafka.Consumer`2.Consume(TimeSpan timeout)&#xD;at Arch.Pocs.KafkaClient.Consumer.ConsoleUI.KafkaAvroConsumer.Poll(String topic)+MoveNext() in /app/KafkaAvroConsumer.</description>
    </item>
    <item>
      <title>Install dotnet localhost ssl certificate for development</title>
      <link>https://www.bustroker.com/notes/install-dotnet-localhost-ssl-certificate-for-development/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
      <guid>https://www.bustroker.com/notes/install-dotnet-localhost-ssl-certificate-for-development/</guid>
      <description>Install trusted localhost certificate dotnet dev-certs https --trust Confirm when pop up shows up.&#xA;Restart browser and browse to https://locahost:5001, or whatever localhost url, and ssl warning is gone.</description>
    </item>
    <item>
      <title>Appsettings &amp; env variables</title>
      <link>https://www.bustroker.com/notes/appsettings-env-variables/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://www.bustroker.com/notes/appsettings-env-variables/</guid>
      <description>Reading apppsettings.json in dotnet 3.1 Add the packages&#xA;dotnet add package Microsoft.Extensions.Configuration&#xD;dotnet add package Microsoft.Extensions.Configuration.FileExtensions&#xD;dotnet add package Microsoft.Extensions.Configuration.Json Add appsettings.json file with required parameters&#xA;{ &amp;#34;Settings&amp;#34;: { &amp;#34;Params&amp;#34;: { &amp;#34;Param1&amp;#34;: &amp;#34;value 1&amp;#34;, &amp;#34;Param2&amp;#34;: &amp;#34;value 2&amp;#34; } } } Load configuration section Console app // Program.cs var builder = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile(&amp;#34;appsettings.json&amp;#34;, optional: true, reloadOnChange: true); IConfiguration configuration = builder.Build(); Use configuration&#xA;var param1 = configuration.GetSection(&amp;#34;Settings&amp;#34;).GetValue&amp;lt;string&amp;gt;(&amp;#34;Params:Param1&amp;#34;); Web Api // Program.</description>
    </item>
    <item>
      <title>Handling parallel exceptions in dotnet</title>
      <link>https://www.bustroker.com/notes/handling-parallel-exceptions-in-dotnet/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      <guid>https://www.bustroker.com/notes/handling-parallel-exceptions-in-dotnet/</guid>
      <description>I&amp;rsquo;m executing several tasks in parallel, where more than one throw exceptions. I want to handle all the exceptions, which basically means catching them all and being able to, at least, rethrowing them with all the info they carry.&#xA;So, here it is how&#xA;var runnersTasks = new List&amp;lt;Task&amp;gt;();// list to keep the tasks created Task compositeTask = null; // task consisting in waiting for all the tasks to finish in parallel try { // run all the tasks and keep them in the list Runners.</description>
    </item>
    <item>
      <title>Create dotnet core sln with class library plus xunit tests with cli for vscode</title>
      <link>https://www.bustroker.com/notes/create-dotnet-core-sln-with-class-library-plus-xunit-tests-with-cli-for-vscode/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://www.bustroker.com/notes/create-dotnet-core-sln-with-class-library-plus-xunit-tests-with-cli-for-vscode/</guid>
      <description>Create a folder for the solution and cd into it A solution (sln file) is required to be able to have projects referencing others.&#xA;mkdir Bustroker.Notes&#xD;cd Bustroker.Notes Create solution The sln file is created directly in the folder it&amp;rsquo;s run.&#xA;dotnet new sln -n Bustroker.Notes Create class library project and add it to the solution A folder is created, containing the project&#xA;dotnet new classlib -n Bustroker.Notes&#xD;dotnet sln add Bustroker.</description>
    </item>
  </channel>
</rss>
