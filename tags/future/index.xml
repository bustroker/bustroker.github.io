<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Future on Coding notes</title>
    <link>https://www.bustroker.com/tags/future/</link>
    <description>Recent content in Future on Coding notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bustroker.com/tags/future/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scala hello Futures</title>
      <link>https://www.bustroker.com/notes/scala-hello-futures/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/scala-hello-futures/</guid>
      <description>Build.sbt scalaVersion := &amp;#34;2.13.6&amp;#34; // Also supports 2.12.x App.scala import scala.concurrent._ import scala.concurrent.duration._ import scala.concurrent.ExecutionContext.Implicits.global object Application extends App { def writeStuff(step: Int, max: Int, name: String) = { for(i &amp;lt;- 1 to max){ Thread.sleep(step*1000) println(s&amp;#34;task $name =&amp;gt; $i s&amp;#34;) } } val futureTask1 = Future { writeStuff(1, 10, &amp;#34;la primera&amp;#34;) } val futureTask2 = Future { writeStuff(2, 8, &amp;#34;la segunda&amp;#34;) } val futures: List[Future[Unit]] = List(futureTask1, futureTask2) futures.map(f =&amp;gt; { println(&amp;#34;===== Sending await for task&amp;#34;) Await.</description>
    </item>
    
  </channel>
</rss>
