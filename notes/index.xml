<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Coding notes</title>
    <link>https://www.bustroker.com/notes/</link>
    <description>Recent content in Notes on Coding notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.bustroker.com/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Aspnet website in docker in windows, IIS and self-signed certificate</title>
      <link>https://www.bustroker.com/notes/aspnet-website-in-docker-in-windows-iis-and-self-signed-certificate/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/aspnet-website-in-docker-in-windows-iis-and-self-signed-certificate/</guid>
      <description>The application is hosted in a docker container. The actual folder with the app publish, is mapped into the container, so when the code changes it&amp;rsquo;s inmediatly reflected in the running container.
Dockerfile FROMmcr.microsoft.com/dotnet/framework/aspnet:4.8SHELL [ &amp;#34;powershell&amp;#34; ]COPY src/Bustroker.LocalEnv.WebUI/bin/app.publish c:/webappADD configureIIS.ps1 /windows/temp/configureIIS.ps1RUN powershell.exe -executionpolicy bypass c:\windows\temp\configureIIS.ps1Configure IIS script configureIIS.ps1 script, copied into the image on build.
# Configure SSL certificate for default website Import-Module WebAdministration Set-Location IIS:\SslBindings New-WebBinding -Name &amp;#34;Default Web Site&amp;#34; -IP &amp;#34;*&amp;#34; -Port 443 -Protocol https $c = New-SelfSignedCertificate -DnsName &amp;#34;localhost&amp;#34; -CertStoreLocation cert:\LocalMachine\My $c | New-Item 0.</description>
    </item>
    
    <item>
      <title>Query sql server from powershell</title>
      <link>https://www.bustroker.com/notes/query-sql-server-from-powershell/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/query-sql-server-from-powershell/</guid>
      <description>sqlcmd utility (2019) Installed with Visual Studio 2019. (Apparently also with Sql Server 2019, but they dont&amp;rsquo;s explain WHERE it actually is :S)
Add to path sqlcmd.exe is located in:
 Visual Studio 2019: C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\Extensions\Microsoft\SQLDB\DAC\150  Run a script sqlcmd -S [SERVER] -i C:\setupscripts\createStockUser.sql -o C:\setupscripts\createStockUser.log # e.g. sqlcmd -S localhost -i C:\setupscripts\createUser.sql -o C:\setupscripts\createUser.log sqlserver powershell module Install-Module sqlserver -Force A minimun nuget version is required.</description>
    </item>
    
    <item>
      <title>Install sql server unattended from Powershell</title>
      <link>https://www.bustroker.com/notes/install-sql-server-unattended-from-powershell/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/install-sql-server-unattended-from-powershell/</guid>
      <description>Download installation from here, run it and use the option Download Media.
 To install Express edition, run powershell as admin and go  cd C:\SQL2019\SQLEXPR_x64_ENU .\setup.exe /Q /HIDECONSOLE=0 /ACTION=INSTALL /SUPPRESSPRIVACYSTATEMENTNOTICE /IACCEPTSQLSERVERLICENSETERMS=1 /FEATURES=SQLENGINE /UPDATEENABLED=0 /INSTANCENAME=&amp;#34;MSSQLSERVER&amp;#34; /ADDCURRENTUSERASSQLADMIN=1 /SECURITYMODE=SQL /SKIPRULES=RebootRequiredCheck /SAPWD=&amp;#34;Pasword_01&amp;#34; /SQLSVCSTARTUPTYPE=AUTOMATIC /INDICATEPROGRESS  For Developer edition, run powershell as admin and go  cd C:\SQL2019\Developer_ENU .\setup.exe /q /ACTION=Install /INSTANCENAME=MSSQLSERVER /FEATURES=SQLEngine /UPDATEENABLED=0 /SQLSVCACCOUNT=&amp;#39;NT AUTHORITY\NETWORK SERVICE&amp;#39; /SQLSYSADMINACCOUNTS=&amp;#39;BUILTIN\ADMINISTRATORS&amp;#39; /TCPENABLED=1 /NPENABLED=0 /IACCEPTSQLSERVERLICENSETERMS /INDICATEPROGRESS /SECURITYMODE=SQL /SAPWD=&amp;#34;Password_01&amp;#34; To uninstall</description>
    </item>
    
    <item>
      <title>Powershell cheatsheet</title>
      <link>https://www.bustroker.com/notes/powershell-cheatsheet/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/powershell-cheatsheet/</guid>
      <description>Bypass digitally sign constrain for scripts execution This is only for current session.
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass List environment variables Get-ChildItem -Path Env:\ Also, using .net from powershell, and specifying system-level variables, by specifying machine as second argument. This argument could also be user
[System.Environment]::GetEnvironmentVariable(&amp;#39;PATH&amp;#39;,&amp;#39;machine&amp;#39;) For some reason, the previous doesn&amp;rsquo;t work for COMPUTERNAME. To get computer name:
$env:computername Set environment variable Run powershell as Admin.
 new variable  [System.</description>
    </item>
    
    <item>
      <title>Simplest html empty file</title>
      <link>https://www.bustroker.com/notes/simplest-html-empty-file/</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/simplest-html-empty-file/</guid>
      <description>The simplest node static files server.
Create the project and install express package &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;The HTML5 Herald&amp;lt;/title&amp;gt; &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;The HTML5 Herald&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;author&amp;#34; content=&amp;#34;SitePoint&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;css/styles.css?v=1.0&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;js/scripts.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; </description>
    </item>
    
    <item>
      <title>Run MSSQL server in docker inside vagrant (ubuntu) VM</title>
      <link>https://www.bustroker.com/notes/run-mssql-server-in-docker-inside-vagrant-ubuntu-vm/</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/run-mssql-server-in-docker-inside-vagrant-ubuntu-vm/</guid>
      <description>Files Vagrant VM needs at least 2Gb.
## Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;ubuntu/focal64&amp;#34; # v 20.04 LTS config.vm.synced_folder &amp;#34;./&amp;#34;, &amp;#34;/vagrant&amp;#34; config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 1433, host: 1433 config.vm.provision :shell, path: &amp;#34;vagrant_provision.sh&amp;#34; config.vm.provider &amp;#34;virtualbox&amp;#34; do |vb| vb.name = &amp;#34;SqlServer&amp;#34;  vb.memory = 2048 end end ## vagrant_provision.sh  echo &amp;#34;provisioning VM...&amp;#34; sudo apt update sudo apt-get update # install docker and run sudo apt -y install docker.io sudo systemctl start docker sudo systemctl enable docker docker --version echo &amp;#34;docker installed and running.</description>
    </item>
    
    <item>
      <title>MySql/MariaDb command line cheatsheet</title>
      <link>https://www.bustroker.com/notes/mysql/mariadb-command-line-cheatsheet/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/mysql/mariadb-command-line-cheatsheet/</guid>
      <description>Commands  Connect  mysql [-h 192.168.1.100] -u USER_NAME -p [DATABASE_NAME]Will be prompted for password
Once connected, the commanda need to end with ;.
 Common commands ´´´ show tables;  ´´´
 Exit Ctrl+C  </description>
    </item>
    
    <item>
      <title>Good reads on miscelanea subjects</title>
      <link>https://www.bustroker.com/notes/good-reads-on-miscelanea-subjects/</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/good-reads-on-miscelanea-subjects/</guid>
      <description> About containers and Unix OS About netcore 2.2 host in IIS InProcess/OutOfProcess About netcore compilation and packages About microservices  </description>
    </item>
    
    <item>
      <title>Simplest single-client TCP client and server</title>
      <link>https://www.bustroker.com/notes/simplest-single-client-tcp-client-and-server/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/simplest-single-client-tcp-client-and-server/</guid>
      <description>Single-client TCP server //Program.cs public class Program { private const int Port = 8080; public static async Task Main(String[] args) { var address = GetLocalIPAddress(); var tcpListener = new TcpListener(GetLocalIPAddress(), Port); tcpListener.Start(); Console.WriteLine($&amp;#34;Server started. Listening to TCP clients at {address}, port {Port}&amp;#34;); while (true) { await WaitForClientConnectionAndHandleAsync(tcpListener); } } static IPAddress GetLocalIPAddress() { var host = Dns.GetHostEntry(Dns.GetHostName()); foreach (var ip in host.AddressList) { if (ip.AddressFamily == AddressFamily.InterNetwork) { return ip; } } throw new Exception(&amp;#34;No network adapters with an IPv4 address in the system!</description>
    </item>
    
    <item>
      <title>Azure function for CosmosDb Changefeed.</title>
      <link>https://www.bustroker.com/notes/azure-function-for-cosmosdb-changefeed./</link>
      <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-function-for-cosmosdb-changefeed./</guid>
      <description>Cosmos  Create cosmos account, cosmos container Database: arch-pocs-misc-cosmosdb. Container being monitored: Transactions Lease container, required for the changefeed: TransactionsLease. The partition key for the lease container must be /id.  Install func cli https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Ccsharp%2Cbash#install-the-azure-functions-core-tools
Create function project func init Bustroker.CosmosDbChangeFeed.Func --dotnet [--docker]I renamed csproj file from Bustroker_CosmosDbChangeFeed_Func.csproj to Bustroker.CosmosDbChangeFeed.Func.csproj.
Check details for development with docker here
Create ChangeFeed function cd Bustroker.CosmosDbChangeFeed.Funcfunc new --name TransactionsChangeFeed [--template {HttpTrigger, CosmosDbTrigger, etc}]And the code</description>
    </item>
    
    <item>
      <title>Azure function with docker</title>
      <link>https://www.bustroker.com/notes/azure-function-with-docker/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-function-with-docker/</guid>
      <description>Install func cli https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=windows%2Ccsharp%2Cbash#install-the-azure-functions-core-tools
Create function project func init Bustroker.HttpEndpoint.Func --dotnet --dockerI renamed csproj file from Bustroker_HttpEndpoint_Func.csproj to Bustroker.HttpEndpoint.Func.csproj. The docker file is created. No need for docker to be installed. I run docker in Ubuntu VM, with Vagrant.
Create function cd Bustroker.HttpEndpoint.Funcfunc new --name HttpEndpoint [--template {HttpTrigger, CosmosDbTrigger, etc}]App settings  Add required packages  dotnet add package Microsoft.Azure.Functions.Extensionsdotnet add package Microsoft.NET.Sdk.Functions Make the function class and methods not static and inject IConfiguration in the constructor  namespace Bustroker.</description>
    </item>
    
    <item>
      <title>Azure DevOps yaml pipeline cheatsheet</title>
      <link>https://www.bustroker.com/notes/azure-devops-yaml-pipeline-cheatsheet/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-devops-yaml-pipeline-cheatsheet/</guid>
      <description>A couple remarks  Use a single pipeline for CI-CD, as there seems to be no way to connect BuildId (i.e., container version/tag to deploy) from CI pipeline to CD pipeline. The environment referenced in the deployment jobs are created if doesn&amp;rsquo;t exist The environment is where the approvals are configured, directly in Azure DevOps The pipeline is linked to a git repo in Azure DevOps as well. The pipeline is triggered when the master branch is pushed.</description>
    </item>
    
    <item>
      <title>Passing arguments to scripts (both `bat` and `bash`)</title>
      <link>https://www.bustroker.com/notes/passing-arguments-to-scripts-both-bat-and-bash/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/passing-arguments-to-scripts-both-bat-and-bash/</guid>
      <description>Windows script .bat //windows-script.batset firstArgument=%1%set secondArgument=%2%echo You passed first %firstArgument% and second %secondArgument%Call it as
.\windows-script.bat &amp;quot;little donald&amp;quot; &amp;quot;had a farm&amp;quot;Unix script .bash //unix-script.bash#!/bin/shfirstArgument=$1secondArgument=$2echo You passed first $firstArgument and second $secondArgumentCall it as
bash unix-script.bash &amp;quot;little donald&amp;quot; &amp;quot;had a farm&amp;quot;</description>
    </item>
    
    <item>
      <title>Curl azure app service with AAD auth</title>
      <link>https://www.bustroker.com/notes/curl-azure-app-service-with-aad-auth/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/curl-azure-app-service-with-aad-auth/</guid>
      <description>Get token curl -X POST -d &#39;grant_type=client_credentials&amp;amp;client_id=&amp;lt;APP_ID&amp;gt;&amp;amp;client_secret=&amp;lt;PASSWORD&amp;gt;&amp;amp;resource=https%3A%2F%2Fmanagement.azure.com%2F&#39; https://login.microsoftonline.com/&amp;lt;TENANT_ID&amp;gt;/oauth2/tokenBasic POST. application/x-www-form-urlencoded is the default curl -X POST http://localhost:8080/data -d &amp;quot;param1=value1&amp;amp;param2=value2&amp;quot; POST json curl -X POST http://localhost:3000/data -H &amp;quot;Content-Type: application/json&amp;quot; -d &#39;{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;}&#39; POST data from file. application/x-www-form-urlencoded is the default. curl -X POST http://localhost:3000/data -d &amp;quot;@data.txt&amp;quot; Disable certificate validation curl -k https://localhost:8080Add bearer token header curl -H &#39;Accept: application/json&#39; -H &amp;quot;Authorization: Bearer &amp;lt;TOKEN&amp;gt;&amp;quot; https://bustroker.com/api/resourceNew line after output curl localhost:8080 ;echoPretty format json output (Linux) curl localhost:8080 | json_ppalso, jq would do it</description>
    </item>
    
    <item>
      <title>Dotnet Core 3.1 appsettings mapping with IOptions, IOptionsSnapshot and IOptionsMonitor</title>
      <link>https://www.bustroker.com/notes/dotnet-core-3.1-appsettings-mapping-with-ioptions-ioptionssnapshot-and-ioptionsmonitor/</link>
      <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/dotnet-core-3.1-appsettings-mapping-with-ioptions-ioptionssnapshot-and-ioptionsmonitor/</guid>
      <description>Check official documentation here
For a behaviour summary for each interface see here
Usage I prefer to create a section called Settings to keep all the parameters, so I&amp;rsquo;ll follow this approach.
Define AppSettings (or you name it) class class AppSettings { public string AadTenantName { get; set; } public string AadClientApplicationId { get; set; } } Create corresponding parameters in appsettings.json { &amp;#34;Logging&amp;#34;: { &amp;#34;LogLevel&amp;#34;: { ..... } }, &amp;#34;AllowedHosts&amp;#34;: &amp;#34;*&amp;#34;, &amp;#34;Settings&amp;#34;: { &amp;#34;AadTenantName&amp;#34;: &amp;#34;comercia.</description>
    </item>
    
    <item>
      <title>JMeter command line - Links</title>
      <link>https://www.bustroker.com/notes/jmeter-command-line-links/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/jmeter-command-line-links/</guid>
      <description>JMeter command line https://www.softwarehour.com/jmeter/jmeter-command-line/ https://www.perfmatrix.com/how-to-generate-a-dashboard-report-in-jmeter/</description>
    </item>
    
    <item>
      <title>Bundling and minification in Aspnet Core MVC</title>
      <link>https://www.bustroker.com/notes/bundling-and-minification-in-aspnet-core-mvc/</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/bundling-and-minification-in-aspnet-core-mvc/</guid>
      <description>Static files should be bundled and minified, and forced to be updated by the browser (not cached) when content changes.
Bundle and minify them To bundle and minify js and css files, add bundleconfig.json file to the project root folder
[ { &amp;#34;outputFileName&amp;#34;: &amp;#34;wwwroot/css/site.min.css&amp;#34;, &amp;#34;inputFiles&amp;#34;: [ &amp;#34;wwwroot/css/site.css&amp;#34; ] }, { &amp;#34;outputFileName&amp;#34;: &amp;#34;wwwroot/js/site.min.js&amp;#34;, &amp;#34;inputFiles&amp;#34;: [ &amp;#34;wwwroot/js/site.js&amp;#34; ], &amp;#34;minify&amp;#34;: { &amp;#34;enabled&amp;#34;: true, &amp;#34;renameLocals&amp;#34;: true }, &amp;#34;sourceMap&amp;#34;: false } ] Load them Add the reference to the page</description>
    </item>
    
    <item>
      <title>Very basic logging to console from netcore webapi with Serilog</title>
      <link>https://www.bustroker.com/notes/very-basic-logging-to-console-from-netcore-webapi-with-serilog/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/very-basic-logging-to-console-from-netcore-webapi-with-serilog/</guid>
      <description>Add serilog required packages
dotnet add package Serilog.AspNetCoredotnet add package Serilog.Sinks.ElasticSearchUsing
using Serilog; using Serilog.Sinks.Elasticsearch; Configure serilog on CreateHostBuilder. Only relevant code is included.
public class Program { private const string ApplicationId = &amp;#34;Bustroker.Transactions.WebApi&amp;#34;; private const string ElasticEndpoint = &amp;#34;http://localhost:9200&amp;#34;; ///....  ///....  ///....  ///....  public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt; Host.CreateDefaultBuilder(args) .UseSerilog((hostincContext, loggerConfiguration) =&amp;gt; // send to Elastic for real time monitoring  ConfigureSerilogLoggerWithElastic(loggerConfiguration) ) .</description>
    </item>
    
    <item>
      <title>Build native mobile packages from html/css/js app with PhoneGap Build cloud service</title>
      <link>https://www.bustroker.com/notes/build-native-mobile-packages-from-html/css/js-app-with-phonegap-build-cloud-service/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/build-native-mobile-packages-from-html/css/js-app-with-phonegap-build-cloud-service/</guid>
      <description>Note: PhoneGap and PhoneGap Build are going to be shut down
General idea Startup with an html/js/css app. Build an APK from the front-end web app using PhoneGap Build cloud service. Unfortunatly Phonegap CLI fails for some weird reason, so the I had to manually zip it before posting it to the API (the API doesn&amp;rsquo;t fail but expects the zip up to where I got).
Phonegap Build account Create an account in https://build.</description>
    </item>
    
    <item>
      <title>Deploy dotnet core app to heroku</title>
      <link>https://www.bustroker.com/notes/deploy-dotnet-core-app-to-heroku/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/deploy-dotnet-core-app-to-heroku/</guid>
      <description>An aspnet core web app/api app is assumed to have been implemented already. Following is how to deploy it.
Heroku PORT Heroku saves in the environment variable PORT, the port where the application should listen. So the port needs to be changed to that one.
//Program.cs public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt; Host.CreateDefaultBuilder(args) .ConfigureWebHostDefaults(webBuilder =&amp;gt; { var herokuPort = Environment.GetEnvironmentVariable(&amp;#34;PORT&amp;#34;); if (!string.IsNullOrWhiteSpace(herokuPort)) { webBuilder.UseUrls($&amp;#34;http://*:{herokuPort}&amp;#34;); } webBuilder.UseStartup&amp;lt;Startup&amp;gt;(); }); Dockerfile FROMmcr.microsoft.com/dotnet/core/sdk:3.1 AS build-envWORKDIR/app# Copy csproj and restore as distinct layersCOPY *.</description>
    </item>
    
    <item>
      <title>Setup aspnet core app with vagrant and docker</title>
      <link>https://www.bustroker.com/notes/setup-aspnet-core-app-with-vagrant-and-docker/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/setup-aspnet-core-app-with-vagrant-and-docker/</guid>
      <description>Create dotnet application. For example, a webapi The webapi will be named Bustroker.Notes.WebApi.
dotnet new webapi -n Bustroker.Notes.WebApiCreate linux VM with Vagrant I rather a linux vm to work with docker. Check the post Vagrant VM provision &amp;amp; vagrant commands cheathsheet for Vagrantfile and provision script. From there select the tools required in the VM. In the example port 8080 of VM is mapped to port 8080 in host. If another is required, it needs to be set.</description>
    </item>
    
    <item>
      <title>Helm 3 commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/helm-3-commands-cheatsheet/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/helm-3-commands-cheatsheet/</guid>
      <description>Create .tgz package from chart folder content cd charthelm package .Deploy local tgz package to kubernetes The terminal must have been authenticated. In case of AKS, run az aks get-credentials --resource-group &amp;lt;RESOURCEGROUP_NAME&amp;gt; --name &amp;lt;AKS_CLUSTERNAME&amp;gt;
helm install &amp;lt;RELEASE_NAME&amp;gt; &amp;lt;TGZ_PACKAGE&amp;gt;List releases in kubernetes helm listhelm get all &amp;lt;RELEASE_NAME&amp;gt;Deploy chart from registry No direct way for the moment. Need to pull, export and then install
helm chart pull &amp;lt;PACKAGE_REPO_WITH_VERSION&amp;gt;helm chart export &amp;lt;PACKAGE_REPO_WITH_VERSION&amp;gt;helm install &amp;lt;RELEASE_NAME&amp;gt; &amp;lt;EXPORTED_CHART_FOLDER&amp;gt; helm chart export will create a folder named after the chart (chart.</description>
    </item>
    
    <item>
      <title>Kubernetes (1.7) commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/kubernetes-1.7-commands-cheatsheet/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/kubernetes-1.7-commands-cheatsheet/</guid>
      <description>Version: 1.6
Get info kubectl get pods -o widekubectl describe svc &amp;lt;SERVICE-NAME&amp;gt;Delete all pods with a label kubectl delete pods -l label=valueSet namespace for kubectl console session kubectl config set-context --current -n=&amp;lt;NAMESPACE&amp;gt;Validate deployment before actually applying it kubectl apply --dry-run=client -f deployment.yamlDeploy a service and watch process kubectl apply -f deployment.yamlkubectl get service &amp;lt;SERVICE-NAME&amp;gt; [--watch]Bash into k8s existing pod kubectl exec -it &amp;lt;POD-NAME&amp;gt; -- /bin/bashDeploy the most basic disposable pod and bash into it, to access the network.</description>
    </item>
    
    <item>
      <title>Docker commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/docker-commands-cheatsheet/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/docker-commands-cheatsheet/</guid>
      <description>Version: 19.03
buid image and set tag -t docker build -t bustroker.notes.webui:v1 .multiple tags are allowed as well
docker build -t bustroker.notes.webui:v1 -t bustroker.notes.webui:latest .tag image docker tag [localImage] [registryServer]/[imageName]:[version]# ej docker tag bustroker.notes.webui:v1 bustrokeracr.azurecr.io/bustroker.notes.webui:v1add tag to existing tagged image docker tag bustroker.notes.webui:v1 bustroker.notes.webui:latestlist images docker imagesremove all images optionally add -f at the end to force
 in Linux  docker rmi $(docker images -q)  in Windows (powershell)  docker images -a -q | % { docker image rm $_ -f } run container from image docker run -d -p HOST-PORT:CONTAINER-PORT &amp;lt;IMAGE-NAME&amp;gt;-p: [port in host]:[port in the container] -d: run as deamon</description>
    </item>
    
    <item>
      <title>Dotnet 3.1 appsettings &amp; env variables</title>
      <link>https://www.bustroker.com/notes/dotnet-3.1-appsettings-env-variables/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/dotnet-3.1-appsettings-env-variables/</guid>
      <description>Reading apppsettings.json in dotnet 3.1 Add the packages
dotnet add package Microsoft.Extensions.Configurationdotnet add package Microsoft.Extensions.Configuration.FileExtensionsdotnet add package Microsoft.Extensions.Configuration.JsonAdd appsettings.json file with required parameters
{ &amp;#34;Settings&amp;#34;: { &amp;#34;Params&amp;#34;: { &amp;#34;Param1&amp;#34;: &amp;#34;value 1&amp;#34;, &amp;#34;Param2&amp;#34;: &amp;#34;value 2&amp;#34; } } } Load configuration section Console app // Program.cs var builder = new ConfigurationBuilder() .SetBasePath(Directory.GetCurrentDirectory()) .AddJsonFile(&amp;#34;appsettings.json&amp;#34;, optional: true, reloadOnChange: true); IConfiguration configuration = builder.Build(); Use configuration
var param1 = configuration.GetSection(&amp;#34;Settings&amp;#34;).GetValue&amp;lt;string&amp;gt;(&amp;#34;Params:Param1&amp;#34;); Web Api // Program.</description>
    </item>
    
    <item>
      <title>Very basic logging to console from netcore webapi with Serilog</title>
      <link>https://www.bustroker.com/notes/very-basic-logging-to-console-from-netcore-webapi-with-serilog/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/very-basic-logging-to-console-from-netcore-webapi-with-serilog/</guid>
      <description>Add serilog
dotnet add package Serilog.AspNetCorepublic class Program { public static void Main(string[] args) { Log.Logger = new LoggerConfiguration() .MinimumLevel.Debug() .MinimumLevel.Override(&amp;#34;Microsoft&amp;#34;, LogEventLevel.Information) .Enrich.FromLogContext() .WriteTo.Console() .CreateLogger(); try { Log.Information(&amp;#34;Starting web host&amp;#34;); CreateHostBuilder(args).Build().Run(); } catch (Exception ex) { Log.Fatal(ex, &amp;#34;Host terminated unexpectedly&amp;#34;); } finally { Log.CloseAndFlush(); } } public static IHostBuilder CreateHostBuilder(string[] args) =&amp;gt; Host.CreateDefaultBuilder(args) .UseSerilog() .ConfigureWebHostDefaults(webBuilder =&amp;gt; { webBuilder.UseStartup&amp;lt;Startup&amp;gt;(); }); } Then add
// Startup.cs  public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { if (env.</description>
    </item>
    
    <item>
      <title>Very basic logging to file from Console app with Serilog</title>
      <link>https://www.bustroker.com/notes/very-basic-logging-to-file-from-console-app-with-serilog/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/very-basic-logging-to-file-from-console-app-with-serilog/</guid>
      <description>Add serilog
dotnet add package Serilogstatic async Task Main(string[] args) { Log.Logger = new LoggerConfiguration() .Enrich.FromLogContext() .WriteTo.Console() .WriteTo.File(&amp;#34;logs/log.json&amp;#34;) .CreateLogger(); Log.Information(&amp;#34;Running..&amp;#34;); } </description>
    </item>
    
    <item>
      <title>Configure a rewrite url in web.config, for IIS hosted apps</title>
      <link>https://www.bustroker.com/notes/configure-a-rewrite-url-in-web.config-for-iis-hosted-apps/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/configure-a-rewrite-url-in-web.config-for-iis-hosted-apps/</guid>
      <description>Rewrite is not a redirect, it doesn&amp;rsquo;t respond with 3xx in an API call case, and doesn&amp;rsquo;t change the url in the browser in a web app case. It&amp;rsquo;s a mapping of urls from what is exposed by IIS to what is actually exposed by the app.
Here the documentation.
Simplest case If the API exponses an endpoint &amp;ldquo;/internalendpoint&amp;rdquo; and I want to actually have it publicly as &amp;ldquo;/publicendpoint&amp;rdquo;
&amp;lt;?xml version=&amp;#34;1.</description>
    </item>
    
    <item>
      <title>ILogger&lt;TCategory&gt; with azure app service Application Insights, plus Live Metrics</title>
      <link>https://www.bustroker.com/notes/iloggertcategory-with-azure-app-service-application-insights-plus-live-metrics/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/iloggertcategory-with-azure-app-service-application-insights-plus-live-metrics/</guid>
      <description>Add Application Insights to the webapi Add the package dotnet add package Microsoft.ApplicationInsights.AspnetCoreRegister the service // Startup.cs  public void ConfigureServices(IServiceCollection services) { services.AddApplicationInsightsTelemetry(); ... } Set the instrumentation key in the appsettings.json. It can also be provided to AddApplicationInsightsTelemetry method when registering the service.
// appsettings.json { &amp;#34;ApplicationInsights&amp;#34;: { &amp;#34;InstrumentationKey&amp;#34;: &amp;#34;putinstrumentationkeyhere&amp;#34; }, .... } Add the ApplicationInsights logging provider This is for the ILogger injected object to send to ApplicationInsights as well.</description>
    </item>
    
    <item>
      <title>Basics of .Net Core 3.1 ILogger&lt;TCategory&gt;</title>
      <link>https://www.bustroker.com/notes/basics-of-.net-core-3.1-iloggertcategory/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/basics-of-.net-core-3.1-iloggertcategory/</guid>
      <description>Applying it to logging to Log Streaming in Azure Web app net core 3.1, (and to Console)
 netcore 3.1 basic console logging  Azure app services real time logs monitoring for troubleshooting.
Log Stream Add package to write to Azure File dotnet add package Microsoft.Extensions.Logging.AzureAppServicesAdd the provider I like to add the Console provider as well so I can check what&amp;rsquo;s going on when running locally too, but it&amp;rsquo;s not required for the portal Log Streaming.</description>
    </item>
    
    <item>
      <title>Azure Managed Identity token with cURL</title>
      <link>https://www.bustroker.com/notes/azure-managed-identity-token-with-curl/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-managed-identity-token-with-curl/</guid>
      <description>To test Managed Identity is working fine, SSH inside the VM with Managed Identity enabled (or RDP, for that matter) and cURL an access token for some resource.
curl &amp;quot;http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&amp;amp;resource=https%3A%2F%2Fmanagement.azure.com%2F&amp;quot; -H Metadata:true -sresource query parameter, as per documentation:
 &amp;ldquo;A query string parameter, indicating the App ID URI of the target resource. It also appears in the aud (audience) claim of the issued token. This example requests a token to access Azure Resource Manager, which has an App ID URI of https://management.</description>
    </item>
    
    <item>
      <title>cURL usefull commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/curl-usefull-commands-cheatsheet/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/curl-usefull-commands-cheatsheet/</guid>
      <description>Basic GET curl localhost:8080Basic POST. application/x-www-form-urlencoded is the default curl -X POST http://localhost:8080/data -d &amp;quot;param1=value1&amp;amp;param2=value2&amp;quot; POST json curl -X POST http://localhost:3000/data -H &amp;quot;Content-Type: application/json&amp;quot; -d &#39;{&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;, &amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;}&#39; POST data from file. application/x-www-form-urlencoded is the default. curl -X POST http://localhost:3000/data -d &amp;quot;@data.txt&amp;quot; Disable certificate validation curl -k https://localhost:8080Add bearer token header curl -H &#39;Accept: application/json&#39; -H &amp;quot;Authorization: Bearer &amp;lt;TOKEN&amp;gt;&amp;quot; https://bustroker.com/api/resourceNew line after output curl localhost:8080 ;echoPretty format json output (Linux) curl localhost:8080 | json_ppalso, jq would do it</description>
    </item>
    
    <item>
      <title>Create file from command line in Windows</title>
      <link>https://www.bustroker.com/notes/create-file-from-command-line-in-windows/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/create-file-from-command-line-in-windows/</guid>
      <description>Create a file with some content from command line in windows from any console
echo &amp;quot;whate ever content&amp;quot; &amp;gt; filename.txt</description>
    </item>
    
    <item>
      <title>Python data science cheatsheet</title>
      <link>https://www.bustroker.com/notes/python-data-science-cheatsheet/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/python-data-science-cheatsheet/</guid>
      <description>Pandas import pandas as pd
Load CSV with &amp;lsquo;;&amp;rsquo; separator df = pd.read_csv(&amp;ldquo;data/entryRequests.csv&amp;rdquo;, sep = &amp;ldquo;;&amp;rdquo;, parse_dates=[[&amp;ldquo;Date&amp;rdquo;, &amp;ldquo;Time&amp;rdquo;]])
Print column names print(df.columns)
Importing pd.read_csv(filename) # From a CSV file pd.read_table(filename) # From a delimited text file (like TSV) pd.read_excel(filename) # From an Excel file pd.read_sql(query, connection_object) # Read from a SQL table/database pd.read_json(json_string) # Read from a JSON formatted string, URL or file. pd.read_html(url) # Parses an html URL, string or file and extracts tables to a list of dataframes pd.</description>
    </item>
    
    <item>
      <title>Nuget.config file</title>
      <link>https://www.bustroker.com/notes/nuget.config-file/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/nuget.config-file/</guid>
      <description>In Azure DevOps&#39; Package Feed, the user bustroker.packages.restore@bustroker.onmicrosoft.com needs to be added explicitly as a Reader, in the Feed&amp;rsquo;s Security tab. Then generate a Read Package PAT for that user.
//nuget.config &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;packageSources&amp;gt; &amp;lt;clear /&amp;gt; &amp;lt;add key=&amp;#34;BustrokerPackages&amp;#34; value=&amp;#34;https://pkgs.dev.azure.com/bustroker/_packaging/Bustroker.Packages./nuget/v3/index.json&amp;#34; /&amp;gt; &amp;lt;/packageSources&amp;gt; &amp;lt;packageSourceCredentials&amp;gt; &amp;lt;BustrokerPackages&amp;gt; &amp;lt;add key=&amp;#34;Username&amp;#34; value=&amp;#34;bustroker.packages.restore@bustroker.onmicrosoft.com&amp;#34; /&amp;gt; &amp;lt;!-- Azure DevOps PAT that can ONLY ReadPackages --&amp;gt; &amp;lt;add key=&amp;#34;ClearTextPassword&amp;#34; value=&amp;#34;CLEAR_PAT&amp;#34; /&amp;gt; &amp;lt;/BustrokerPackages&amp;gt; &amp;lt;/packageSourceCredentials&amp;gt; &amp;lt;/configuration&amp;gt; Environment Variables can be used as well //nuget.</description>
    </item>
    
    <item>
      <title>Enable app service healthcheck from az CLI</title>
      <link>https://www.bustroker.com/notes/enable-app-service-healthcheck-from-az-cli/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/enable-app-service-healthcheck-from-az-cli/</guid>
      <description>There&amp;rsquo;s a new healthcheck feature available, in preview as of 18-01-2020 (the link url includes &amp;lsquo;preview&amp;rsquo;, so it&amp;rsquo;ll probably break when the feature goes GA&amp;hellip;)
When healthcheck is enabled:
 the platform sends requests, apparently every minute aprox, to monitor the specified health endpoint. As per the logs, the request seem to be sent every minute in a round robin, alternating all the VM instances behind the app service balancer. if Easy Auth is set for the app service, then for the configured endpoint it is disabled so it can be hit without authentication.</description>
    </item>
    
    <item>
      <title>Azure Api App failing on startup with 500.30</title>
      <link>https://www.bustroker.com/notes/azure-api-app-failing-on-startup-with-500.30/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-api-app-failing-on-startup-with-500.30/</guid>
      <description>When the app startup fails, it does so silently. Or effectivly silently: complaining without providing relevant information. This is the IIS complain
&amp;lt;body&amp;gt; &amp;lt;h1&amp;gt; HTTP Error 500.30 - ANCM In-Process Start Failure &amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt; Common solutions to this issue: &amp;lt;/h2&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;The application failed to start&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;The application started but then stopped&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;The application started but threw an exception during startup&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt; &amp;lt;h2&amp;gt; Troubleshooting steps: &amp;lt;/h2&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; Check the system event log for error messages &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; Enable logging the application process&amp;#39; stdout messages &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; Attach a debugger to the application process and inspect &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;h2&amp;gt; For more information visit: &amp;lt;a href=&amp;#34;https://go.</description>
    </item>
    
    <item>
      <title>Azure App Configuration refresh on demand</title>
      <link>https://www.bustroker.com/notes/azure-app-configuration-refresh-on-demand/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-app-configuration-refresh-on-demand/</guid>
      <description>Here&amp;rsquo;s what Azure App Configuration Service is.
Here&amp;rsquo;s how to use it.
How the web api middleware uses the App Configuration Client As per oficial documentation, refering to
// Startup.Configure(IApplicationBuilder app, IWebHostEnvironment env)app.UseAzureAppConfiguration();&amp;ldquo;The middleware uses the refresh configuration specified in the AddAzureAppConfiguration method in Program.cs to trigger a refresh for each request received by the ASP.NET Core web app. For each request, a refresh operation is triggered and the client library checks if the cached value for the registered configuration setting has expired.</description>
    </item>
    
    <item>
      <title>Handling parallel exceptions in dotnet</title>
      <link>https://www.bustroker.com/notes/handling-parallel-exceptions-in-dotnet/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/handling-parallel-exceptions-in-dotnet/</guid>
      <description>I&amp;rsquo;m executing several tasks in parallel, where more than one throw exceptions. I want to handle all the exceptions, which basically means catching them all and being able to, at least, rethrowing them with all the info they carry.
So, here it is how
var runnersTasks = new List&amp;lt;Task&amp;gt;();// list to keep the tasks created Task compositeTask = null; // task consisting in waiting for all the tasks to finish in parallel try { // run all the tasks and keep them in the list  Runners.</description>
    </item>
    
    <item>
      <title>Azure App Configuration with Key Vault and Managed Identity in HA</title>
      <link>https://www.bustroker.com/notes/azure-app-configuration-with-key-vault-and-managed-identity-in-ha/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/azure-app-configuration-with-key-vault-and-managed-identity-in-ha/</guid>
      <description>Here&amp;rsquo;s what Azure App Configuration Service is.
And I want a production ready setup:
 use it to serve secret params as well, keeping them in Key Vault access it with Managed Identity(MI). have it in High Availability  How Azure App Configuration client works Here&amp;rsquo;s how the client works, using the sentinel pattern, i.e., using one key to be the one that the client actually checks to know whether or not a full configuration refresh is needed.</description>
    </item>
    
    <item>
      <title>Basic usage IHttpClientFactory</title>
      <link>https://www.bustroker.com/notes/basic-usage-ihttpclientfactory/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/basic-usage-ihttpclientfactory/</guid>
      <description>Register it //Startup.cs public void ConfigureServices(IServiceCollection services) { ... services.AddHttpClient(); } Use it //HealthController.cs private readonly IHttpClientFactory _clientFactory; public HealthController(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } </description>
    </item>
    
    <item>
      <title>Change directory to different drive in Windows cmd</title>
      <link>https://www.bustroker.com/notes/change-directory-to-different-drive-in-windows-cmd/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/change-directory-to-different-drive-in-windows-cmd/</guid>
      <description>To change from C drive to D drive, going cd D: or any similar, doesn&amp;rsquo;t work. Instead go:
C:\Users\bustroker&amp;gt; d:D:\&amp;gt;</description>
    </item>
    
    <item>
      <title>A cool terminal for windows with context menu</title>
      <link>https://www.bustroker.com/notes/a-cool-terminal-for-windows-with-context-menu/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/a-cool-terminal-for-windows-with-context-menu/</guid>
      <description>No installation, cool colors, with context menu to open directly in a folder.
Install Donwload cmder terminal, unzip, copy to the folder you prefer (just not any Administrator-required-to-work-on folder).
Context menu shortcut To add Shortcut in context menu for Open Cmder here, open a cmd as Administrator, and go:
cd c:\cmder\folder.\cmder.exe /REGISTER ALL</description>
    </item>
    
    <item>
      <title>Kusto cheatsheet</title>
      <link>https://www.bustroker.com/notes/kusto-cheatsheet/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/kusto-cheatsheet/</guid>
      <description>requests durations distribution with steps (bins) of 100 ms app(&amp;quot;bustroker-sales-webapi&amp;quot;).requests| where name == &amp;quot;POST SalesController/Post&amp;quot;| project req_timestamp = timestamp, req_id = id, req_name = name, req_url = url, req_success = success, req_resultCode = resultCode, req_duration = duration, req_operation_name = operation_Name, req_operation_Id = operation_Id| summarize count() by bin(req_duration, 100)| sort by req_duration asc| render timechart requests duration percentiles and requests dependencies duration percentiles app(&amp;quot;bustroker-sales-webapi&amp;quot;).requests| where name == &amp;quot;POST SalesControler/Post&amp;quot;| project req_timestamp = timestamp, req_id = id, req_name = name, req_url = url, req_success = success, req_resultCode = resultCode, req_duration = duration, req_operation_name = operation_Name, req_operation_Id = operation_Id| summarize count(), avg(req_duration), stdev(req_duration) , percentiles(req_duration, 25, 50, 95, 99)| project type_tag = &amp;quot;Core Request&amp;quot;, total = count_ , avg_duration = avg_req_duration, stdev = stdev_req_duration, percentile_duration_25 = percentile_req_duration_25, percentile_duration_50 = percentile_req_duration_50, percentile_duration_95 = percentile_req_duration_95, percentile_duration_99 = percentile_req_duration_99 | union(app(&amp;quot;bustroker-sales-webapi&amp;quot;).</description>
    </item>
    
    <item>
      <title>Vagrant VM provision &amp; vagrant commands cheathsheet</title>
      <link>https://www.bustroker.com/notes/vagrant-vm-provision-vagrant-commands-cheathsheet/</link>
      <pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/vagrant-vm-provision-vagrant-commands-cheathsheet/</guid>
      <description>Vagrantfile Vagrant.configure(&amp;#34;2&amp;#34;) do |config| config.vm.box = &amp;#34;ubuntu/focal64&amp;#34; # v 20.04 LTS config.vm.synced_folder &amp;#34;./&amp;#34;, &amp;#34;/vagrant&amp;#34; config.vm.network &amp;#34;forwarded_port&amp;#34;, guest: 8080, host: 8080 config.vm.provision :shell, path: &amp;#34;vagrant_provision.sh&amp;#34; config.vm.provider &amp;#34;virtualbox&amp;#34; do |vb| vb.name = &amp;#34;UbuntuBionic&amp;#34;  vb.memory = 2048 # vb.gui = true end end Vagrant provision script Create a file vagrant_provision.sh in the same folder of Vagrantfile, with the following content. Just remove the tools not required, here&amp;rsquo;s all I&amp;rsquo;ve ever needed.
Make sure to check for latest versions of some of the installed tools.</description>
    </item>
    
    <item>
      <title>Create dotnet core sln with class library plus xunit tests with cli for vscode</title>
      <link>https://www.bustroker.com/notes/create-dotnet-core-sln-with-class-library-plus-xunit-tests-with-cli-for-vscode/</link>
      <pubDate>Thu, 05 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/create-dotnet-core-sln-with-class-library-plus-xunit-tests-with-cli-for-vscode/</guid>
      <description>Create a folder for the solution and cd into it A solution (sln file) is required to be able to have projects referencing others.
mkdir Bustroker.Notescd Bustroker.NotesCreate solution The sln file is created directly in the folder it&amp;rsquo;s run.
dotnet new sln -n Bustroker.NotesCreate class library project and add it to the solution A folder is created, containing the project
dotnet new classlib -n Bustroker.Notesdotnet sln add Bustroker.</description>
    </item>
    
    <item>
      <title>Voice commands assistant in node</title>
      <link>https://www.bustroker.com/notes/voice-commands-assistant-in-node/</link>
      <pubDate>Wed, 19 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/voice-commands-assistant-in-node/</guid>
      <description>Shirka is a nodejs voice command assistant based in pocketsphinx, living in a RaspberryPi3. Nodered ties all up.
The Ears Shirka_ears listens for voice commands through the microphone, and publishes them in a mosquitto queue. It&amp;rsquo;s based in pocketsphinx, a &amp;ldquo;a lightweight speech recognition engine, specifically tuned for handheld and mobile devices, though it works equally well on the desktop &amp;ldquo;, in their own saying.
The Voice Shirka_voice is a listener to another mosquitto queue that receives the messages, creates a WAF file using pico2wave text-to-speech engine, and reproduces them with omxplayer.</description>
    </item>
    
    <item>
      <title>Vagrant commands cheatsheet</title>
      <link>https://www.bustroker.com/notes/vagrant-commands-cheatsheet/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/vagrant-commands-cheatsheet/</guid>
      <description>Most used commands update vagrant box updatenew vagrant file vagrant initcheck status vagrant statusvagrant global-statusto manage VMs (boxes) vagrant boxto run VM local project folder is sync with /vagrant in VM
vagrant upto ssh in vagrant sshclose ssh connection with Ctrl+d
to shut down the VM (without loosing everything) vagrant haltto destroy the VM (losing everything) vagrant destroyssh into VM vagrant sshvagrant VM ssh server is in host&amp;rsquo;s 2222 port, so putty can be used targeting localhost:2222 Also, vagrant VM&amp;rsquo;s 22 port can be forwarded to any other host&amp;rsquo;s port.</description>
    </item>
    
    <item>
      <title>Simplest node express static files server</title>
      <link>https://www.bustroker.com/notes/simplest-node-express-static-files-server/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/simplest-node-express-static-files-server/</guid>
      <description>The simplest node static files server.
Create the project and install express package npm initnpm install express --saveCreate server.js file in the root. // server.js const express = require(&amp;#39;express&amp;#39;); const app = express(); app.use(express.static(&amp;#39;www&amp;#39;)) /* routes root &amp;#39;/&amp;#39; to index.html */ app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { res.sendFile(&amp;#39;/index.html&amp;#39;); }) app.listen(3000, () =&amp;gt; console.log(&amp;#39;Listening on port 3000..&amp;#39;)); Create a static page Now all files in www folder are being served. Create a www folder in the root and add an html file.</description>
    </item>
    
    <item>
      <title>Simplest node express web API</title>
      <link>https://www.bustroker.com/notes/simplest-node-express-web-api/</link>
      <pubDate>Wed, 17 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/simplest-node-express-web-api/</guid>
      <description>For frontend dev, the simplest web API to joke around with.
Create the project and install express package
npm initnpm install expressCreate server.js file in the root.
// server.js const express = require(&amp;#39;express&amp;#39;); const app = express(); app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { res.send({ message: &amp;#34;I&amp;#39;m here&amp;#34;}); }); app.listen(3000, () =&amp;gt; console.log(&amp;#39;Listening on port 3000!&amp;#39;)); </description>
    </item>
    
    <item>
      <title>Mortgage simulator in python</title>
      <link>https://www.bustroker.com/notes/mortgage-simulator-in-python/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/mortgage-simulator-in-python/</guid>
      <description>Implemented as per explanation by Universidad de Valencia&amp;rsquo;s Professor Carlos Ivorra, in the article Las matemáticas de una hipoteca about &amp;ldquo;underlying math in mortgage loans&amp;rdquo;. The full pdf article (in spanish) is here.
The code is in spanish and by the way, it&amp;rsquo;s so cool to be able to name variables in python using spanish accents. It brough out a smile :).
The important part class Calculadora: def __init__(self): return def interés_efectivo_mensual(self, euríbor, diferencial_interés): # (divido tb por 100 para tener el por-uno) return (euríbor + diferencial_interés) / 1200 def cuota(self, monto_préstamo, interés_efectivo_mensual, total_de_meses): c_0 = monto_préstamo i = interés_efectivo_mensual N = total_de_meses return (c_0 * i) / (1-(1 + i)**(-N)) def deuda_después_de_n_pagos(self, monto_cuota, interés_efectivo_mensual, total_de_meses, n): c = monto_cuota i = interés_efectivo_mensual N = total_de_meses return c/i * (1 - (1+i)**(n-N)) Talk is cheap Here&amp;rsquo;s the code.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.bustroker.com/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/</guid>
      <description>Why Warmup is important so the users don&amp;rsquo;t get a cold start on the app. When deploying to Azure app service, implementing the /warmup call every X minutes is not feasible as we don&amp;rsquo;t have access to actual instances directly to make the calls, so the requests will only get to the lucky instance the balancer in front of the app service decides to send the request to. Also, the point of PaaS is having the platform handle it, isn&amp;rsquo;t it?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.bustroker.com/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/</guid>
      <description>General idea: the exceptions messages need to be defined in terms of the contracts of the API.
My code:
using Microsoft.Azure.Functions.Extensions.DependencyInjection; using Microsoft.Extensions.DependencyInjection; using System.IO; using Microsoft.Extensions.Configuration; [assembly: FunctionsStartup(typeof(Arch.Pocs.Containers.AppService.HttpEndpoint.Func.Startup))] namespace Arch.Pocs.Containers.AppService.HttpEndpoint.Func { public class Startup : FunctionsStartup { public override void Configure(IFunctionsHostBuilder builder) { builder.Services.AddHttpClient(); } } } and
using System; using System.IO; using System.Threading.Tasks; using Microsoft.AspNetCore.Mvc; using Microsoft.Azure.WebJobs; using Microsoft.Azure.WebJobs.Extensions.Http; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.Logging; using Newtonsoft.Json; using Microsoft.Extensions.Configuration; namespace Arch.</description>
    </item>
    
    <item>
      <title>MSSQL Server 2019 docker image for windows</title>
      <link>https://www.bustroker.com/notes/mssql-server-2019-docker-image-for-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/mssql-server-2019-docker-image-for-windows/</guid>
      <description>MSSQL 2019 not available yet in official images, so&amp;hellip;
Dockerfile The windows server base images must be the same windows version as the host, as per official documentation (¡¿?!). To get the version open cmd and type ver, to get something like 10.0.19042.867.
FROMmcr.microsoft.com/windows/servercore:10.0.19042.867SHELL [ &amp;#34;powershell&amp;#34; ]# CopyCOPY ./setupScripts/installSqlServerTools.ps1 /setupScripts/installSqlServerTools.ps1COPY ./setupScripts/startAndConfigSqlServer.ps1 /setupScripts/startAndConfigSqlServer.ps1# Copy installersCOPY ./installers /installers# install Sql Server Developer edition (see readme.md for details)RUN c:/setupScripts/installSqlServerTools.ps1CMD /setupScripts/startAndConfigSqlServer.ps1 -sa_password $env:sa_password -attach_dbs \&amp;#34;$env:attach_dbs\&amp;#34; -ACCEPT_EULA Y -VerboseInstallers The folder installers contains:</description>
    </item>
    
    <item>
      <title>Run MSSQL 2017 server in docker for windows</title>
      <link>https://www.bustroker.com/notes/run-mssql-2017-server-in-docker-for-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.bustroker.com/notes/run-mssql-2017-server-in-docker-for-windows/</guid>
      <description>MSSQL 2019 not available yet in official images.
Docker compose First check attach_dbs argument. The first time running it, remove it. Afterwards, if starting with an existing db, use it to attach existing mdf/ldf files. They can also be attached from T-Sql after starting the server.
Note: Mapping localhost folder to default C:/Program Files&amp;hellip; fails, probably for permission reasons (not clear from the message, as usual).
// docker-compose.yaml version: &amp;#39;3.8&amp;#39; services: SQLServer: image: microsoft/mssql-server-windows-developer:2017 environment: - ACCEPT_EULA=Y - SA_PASSWORD=Password_01 # - attach_dbs=[{&amp;#39;dbName&amp;#39;:&amp;#39;Joker&amp;#39;,&amp;#39;dbFiles&amp;#39;:[&amp;#39;C:\\SQLData\\Joker1.</description>
    </item>
    
  </channel>
</rss>
